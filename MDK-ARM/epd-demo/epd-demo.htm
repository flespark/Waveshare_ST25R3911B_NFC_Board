<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [epd-demo\epd-demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image epd-demo\epd-demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Wed Jan  8 13:36:18 2025
<BR><P>
<H3>Maximum Stack Usage =       1184 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; demoCycle &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[61]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">Error_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[10c]">rfalListenSetState</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10c]">rfalListenSetState</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f1xx_it.o(.text.EXTI0_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32f1xx_it.o(.text.EXTI2_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(.text.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(.text.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f1xx.o(.text.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f1xx_it.o(.text.TIM3_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3b]">USER_initialize</a> from user_diskio.o(.text.USER_initialize) referenced from user_diskio.o(.data.USER_Driver)
 <LI><a href="#[3f]">USER_ioctl</a> from user_diskio.o(.text.USER_ioctl) referenced from user_diskio.o(.data.USER_Driver)
 <LI><a href="#[3d]">USER_read</a> from user_diskio.o(.text.USER_read) referenced from user_diskio.o(.data.USER_Driver)
 <LI><a href="#[3c]">USER_status</a> from user_diskio.o(.text.USER_status) referenced from user_diskio.o(.data.USER_Driver)
 <LI><a href="#[3e]">USER_write</a> from user_diskio.o(.text.USER_write) referenced from user_diskio.o(.data.USER_Driver)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[3a]">fputc</a> from retarget_io.o(.text.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[39]">iso15693PhyVCDCode1Of256</a> from rfal_iso15693_2.o(.text.iso15693PhyVCDCode1Of256) referenced 2 times from rfal_iso15693_2.o(.text.iso15693VCDCode)
 <LI><a href="#[38]">iso15693PhyVCDCode1Of4</a> from rfal_iso15693_2.o(.text.iso15693PhyVCDCode1Of4) referenced 2 times from rfal_iso15693_2.o(.text.iso15693VCDCode)
 <LI><a href="#[35]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[40]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[127]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[128]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[129]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[12b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[114]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
</UL>

<P><STRONG><a name="[5d]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Browser_save_fileame
</UL>

<P><STRONG><a name="[5c]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Browser_save_fileame
</UL>

<P><STRONG><a name="[45]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Browser_save_fileame
</UL>

<P><STRONG><a name="[47]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>

<P><STRONG><a name="[133]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[46]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[48]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[41]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[134]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[135]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[136]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 1248 bytes, Stack size 96 bytes, sd_card_drive.o(.text.BSP_SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = BSP_SD_GetCardInfo &rArr; SD_IO_WriteReadData &rArr; MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteReadData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteByte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_CSState
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_ioctl
</UL>

<P><STRONG><a name="[51]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, sd_card_drive.o(.text.BSP_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = BSP_SD_GetCardState &rArr; SD_IO_WriteReadData &rArr; MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteReadData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteByte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_CSState
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_write
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_read
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_status
</UL>

<P><STRONG><a name="[52]"></a>BSP_SD_Init</STRONG> (Thumb, 1292 bytes, Stack size 56 bytes, sd_card_drive.o(.text.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = BSP_SD_Init &rArr; SD_SendCmd &rArr; SD_IO_WriteReadData &rArr; MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteReadData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteByte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_CSState
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_initialize
</UL>

<P><STRONG><a name="[54]"></a>BSP_SD_ReadBlocks</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, sd_card_drive.o(.text.BSP_SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = BSP_SD_ReadBlocks &rArr; SD_IO_WriteReadData &rArr; MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteReadData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteByte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_CSState
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_read
</UL>

<P><STRONG><a name="[57]"></a>BSP_SD_WriteBlocks</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, sd_card_drive.o(.text.BSP_SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = BSP_SD_WriteBlocks &rArr; SD_IO_WriteReadData &rArr; MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteReadData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteByte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_CSState
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_write
</UL>

<P><STRONG><a name="[58]"></a>Browser_save_fileame</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, browser.o(.text.Browser_save_fileame))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Browser_save_fileame &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = EXTI0_IRQHandler &rArr; st25r3911Isr &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Isr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTI2_IRQHandler &rArr; puts &rArr; fputc &rArr; stdout_putchar &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[84]"></a>FATFS_LinkDriver</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ff_gen_drv.o(.text.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[62]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f1xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>

<P><STRONG><a name="[64]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>HAL_GPIO_Init</STRONG> (Thumb, 530 bytes, Stack size 44 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[90]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Isr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[82]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_CSState
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_refresh_gram
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeTestRegisterBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_screen
</UL>

<P><STRONG><a name="[63]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
</UL>

<P><STRONG><a name="[8e]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[65]"></a>HAL_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f1xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>HAL_InitTick</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f1xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[68]"></a>HAL_MspInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[121]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeTestRegisterBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClearInterrupts
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
</UL>

<P><STRONG><a name="[74]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeTestRegisterBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClearInterrupts
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
</UL>

<P><STRONG><a name="[6a]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[66]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[6b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[80]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[6c]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1024 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>HAL_SPI_Init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[6e]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[70]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 584 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(.text.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_refresh_gram
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_screen
</UL>

<P><STRONG><a name="[71]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 782 bytes, Stack size 32 bytes, stm32f1xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteReadData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteByte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
</UL>

<P><STRONG><a name="[69]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[79]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f1xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[72]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[73]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[89]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 402 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[77]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 368 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, tim.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>HAL_UART_GetState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>

<P><STRONG><a name="[7d]"></a>HAL_UART_Init</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[7e]"></a>HAL_UART_MspInit</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[81]"></a>HAL_UART_Transmit</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HardFault_Handler &rArr; puts &rArr; fputc &rArr; stdout_putchar &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>MX_FATFS_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fatfs.o(.text.MX_FATFS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_FATFS_Init &rArr; FATFS_LinkDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>MX_GPIO_Init</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>MX_SPI1_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, spi.o(.text.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>MX_SPI2_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, spi.o(.text.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteReadData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteByte
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>MX_TIM3_Init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, tim.o(.text.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(.text.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SD_IO_CSState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sd_card_interface.o(.text.SD_IO_CSState))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[50]"></a>SD_IO_WriteByte</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sd_card_interface.o(.text.SD_IO_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SD_IO_WriteByte &rArr; MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[4f]"></a>SD_IO_WriteReadData</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sd_card_interface.o(.text.SD_IO_WriteReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SD_IO_WriteReadData &rArr; MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>SpiInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi.o(.text.SpiInit))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>SpiTxRx</STRONG> (Thumb, 72 bytes, Stack size 536 bytes, spi.o(.text.SpiTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeTestRegisterBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, system_stm32f1xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USER_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, user_diskio.o(.text.USER_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USER_initialize &rArr; BSP_SD_Init &rArr; SD_SendCmd &rArr; SD_IO_WriteReadData &rArr; MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data.USER_Driver)
</UL>
<P><STRONG><a name="[3f]"></a>USER_ioctl</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, user_diskio.o(.text.USER_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = USER_ioctl &rArr; BSP_SD_GetCardInfo &rArr; SD_IO_WriteReadData &rArr; MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data.USER_Driver)
</UL>
<P><STRONG><a name="[3d]"></a>USER_read</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, user_diskio.o(.text.USER_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = USER_read &rArr; BSP_SD_ReadBlocks &rArr; SD_IO_WriteReadData &rArr; MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data.USER_Driver)
</UL>
<P><STRONG><a name="[3c]"></a>USER_status</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, user_diskio.o(.text.USER_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USER_status &rArr; BSP_SD_GetCardState &rArr; SD_IO_WriteReadData &rArr; MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data.USER_Driver)
</UL>
<P><STRONG><a name="[3e]"></a>USER_write</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, user_diskio.o(.text.USER_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = USER_write &rArr; BSP_SD_WriteBlocks &rArr; SD_IO_WriteReadData &rArr; MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data.USER_Driver)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>demoCycle</STRONG> (Thumb, 1180 bytes, Stack size 88 bytes, demo.o(.text.demoCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = demoCycle &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitialize
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeHasWoke
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheckPresence
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCheckPresence
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolution
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendAPDUs
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, diskio.o(.text.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[da]"></a>disk_read</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diskio.o(.text.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[c2]"></a>disk_status</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, diskio.o(.text.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[d9]"></a>disk_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diskio.o(.text.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[59]"></a>f_opendir</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, ff.o(.text.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Browser_save_fileame
</UL>

<P><STRONG><a name="[5b]"></a>f_readdir</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, ff.o(.text.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = f_readdir &rArr; dir_read &rArr; get_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Browser_save_fileame
</UL>

<P><STRONG><a name="[c5]"></a>ff_convert</STRONG> (Thumb, 426 bytes, Stack size 8 bytes, ccsbcs.o(.text.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[bc]"></a>ff_wtoupper</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, ccsbcs.o(.text.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[3a]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, retarget_io.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; stdout_putchar &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[bb]"></a>get_fat</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, ff.o(.text.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[99]"></a>hex2Str</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, logger.o(.text.hex2Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hex2Str
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
</UL>

<P><STRONG><a name="[117]"></a>iso15693PhyConfigure</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rfal_iso15693_2.o(.text.iso15693PhyConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[c7]"></a>iso15693VCDCode</STRONG> (Thumb, 472 bytes, Stack size 64 bytes, rfal_iso15693_2.o(.text.iso15693VCDCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = iso15693VCDCode &rArr; rfalCrcCalculateCcitt
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[c9]"></a>iso15693VICCDecode</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, rfal_iso15693_2.o(.text.iso15693VICCDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iso15693VICCDecode &rArr; rfalCrcCalculateCcitt
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCrcCalculateCcitt
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = main &rArr; demoCycle &rArr; rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_refresh_gram
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_bitmap
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_draw_line
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display_string
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Browser_save_fileame
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalAnalogConfigInitialize
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d2]"></a>rfalAnalogConfigInitialize</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfal_analogconfig.o(.text.rfalAnalogConfigInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>rfalCalibrate</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(.text.rfalCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = rfalCalibrate &rArr; st25r3911AdjustRegulators &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[e1]"></a>rfalChipChangeRegBits</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(.text.rfalChipChangeRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = rfalChipChangeRegBits &rArr; st25r3911ChangeRegisterBits &rArr; st25r3911ModifyRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[e3]"></a>rfalChipChangeTestRegBits</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(.text.rfalChipChangeTestRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeTestRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
</UL>

<P><STRONG><a name="[c8]"></a>rfalCrcCalculateCcitt</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, rfal_crc.o(.text.rfalCrcCalculateCcitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalCrcCalculateCcitt
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VCDCode
</UL>

<P><STRONG><a name="[eb]"></a>rfalFeliCaPoll</STRONG> (Thumb, 424 bytes, Stack size 88 bytes, rfal_rfst25r3911.o(.text.rfalFeliCaPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = rfalFeliCaPoll &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCollisionResolution
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerCheckPresence
</UL>

<P><STRONG><a name="[91]"></a>rfalFieldOff</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(.text.rfalFieldOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rfalFieldOff &rArr; st25r3911ClrRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOff
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[95]"></a>rfalFieldOnAndStartGT</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(.text.rfalFieldOnAndStartGT))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = rfalFieldOnAndStartGT &rArr; st25r3911PerformCollisionAvoidance &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOn
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[10e]"></a>rfalGetBitRate</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(.text.rfalGetBitRate))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[cd]"></a>rfalGetTransceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(.text.rfalGetTransceiveStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
</UL>

<P><STRONG><a name="[f4]"></a>rfalISO14443ATransceiveAnticollisionFrame</STRONG> (Thumb, 384 bytes, Stack size 64 bytes, rfal_rfst25r3911.o(.text.rfalISO14443ATransceiveAnticollisionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = rfalISO14443ATransceiveAnticollisionFrame &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
</UL>

<P><STRONG><a name="[f9]"></a>rfalISO14443ATransceiveShortFrame</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, rfal_rfst25r3911.o(.text.rfalISO14443ATransceiveShortFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = rfalISO14443ATransceiveShortFrame &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
</UL>

<P><STRONG><a name="[100]"></a>rfalISO15693TransceiveAnticollisionEOF</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(.text.rfalISO15693TransceiveAnticollisionEOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = rfalISO15693TransceiveAnticollisionEOF &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
</UL>

<P><STRONG><a name="[101]"></a>rfalISO15693TransceiveAnticollisionFrame</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, rfal_rfst25r3911.o(.text.rfalISO15693TransceiveAnticollisionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = rfalISO15693TransceiveAnticollisionFrame &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerCollisionResolution
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionEOF
</UL>

<P><STRONG><a name="[d4]"></a>rfalInitialize</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(.text.rfalInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = rfalInitialize &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911InitInterrupts
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckChipID
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>rfalIsoDepDeselect</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, rfal_isodep.o(.text.rfalIsoDepDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = rfalIsoDepDeselect &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
</UL>

<P><STRONG><a name="[b4]"></a>rfalIsoDepGetApduTransceiveStatus</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, rfal_isodep.o(.text.rfalIsoDepGetApduTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = rfalIsoDepGetApduTransceiveStatus &rArr; rfalIsoDepGetTransceiveStatus &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
</UL>

<P><STRONG><a name="[107]"></a>rfalIsoDepGetTransceiveStatus</STRONG> (Thumb, 962 bytes, Stack size 40 bytes, rfal_isodep.o(.text.rfalIsoDepGetTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = rfalIsoDepGetTransceiveStatus &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepReSendControlMsg
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
</UL>

<P><STRONG><a name="[9a]"></a>rfalIsoDepInitialize</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, rfal_isodep.o(.text.rfalIsoDepInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>

<P><STRONG><a name="[af]"></a>rfalIsoDepPollAHandleActivation</STRONG> (Thumb, 782 bytes, Stack size 72 bytes, rfal_isodep.o(.text.rfalIsoDepPollAHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = rfalIsoDepPollAHandleActivation &rArr; rfalIsoDepDeselect &rArr; isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepCalcBitRate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[9b]"></a>rfalIsoDepPollBHandleActivation</STRONG> (Thumb, 578 bytes, Stack size 104 bytes, rfal_isodep.o(.text.rfalIsoDepPollBHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = rfalIsoDepPollBHandleActivation &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbTR2ToFDT
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepCalcBitRate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[b2]"></a>rfalIsoDepStartApduTransceive</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, rfal_isodep.o(.text.rfalIsoDepStartApduTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalIsoDepStartApduTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
</UL>

<P><STRONG><a name="[10c]"></a>rfalListenSetState</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, rfal_rfst25r3911.o(.text.rfalListenSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + In Cycle
<LI>Call Chain = rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[10d]"></a>rfalNfcDepATR</STRONG> (Thumb, 588 bytes, Stack size 272 bytes, rfal_nfcdep.o(.text.rfalNfcDepATR))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = rfalNfcDepATR &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[b6]"></a>rfalNfcDepGetTransceiveStatus</STRONG> (Thumb, 2106 bytes, Stack size 72 bytes, rfal_nfcdep.o(.text.rfalNfcDepGetTransceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = rfalNfcDepGetTransceiveStatus &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
</UL>

<P><STRONG><a name="[aa]"></a>rfalNfcDepInitialize</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rfal_nfcdep.o(.text.rfalNfcDepInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[ab]"></a>rfalNfcDepInitiatorHandleActivation</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, rfal_nfcdep.o(.text.rfalNfcDepInitiatorHandleActivation))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = rfalNfcDepInitiatorHandleActivation &rArr; rfalNfcDepATR &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetBitRate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[10f]"></a>rfalNfcDepPSL</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, rfal_nfcdep.o(.text.rfalNfcDepPSL))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalNfcDepPSL &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
</UL>

<P><STRONG><a name="[b5]"></a>rfalNfcDepStartTransceive</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, rfal_nfcdep.o(.text.rfalNfcDepStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rfalNfcDepStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
</UL>

<P><STRONG><a name="[ac]"></a>rfalNfcaPollerFullCollisionResolution</STRONG> (Thumb, 444 bytes, Stack size 64 bytes, rfal_nfca.o(.text.rfalNfcaPollerFullCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = rfalNfcaPollerFullCollisionResolution &rArr; rfalNfcaPollerSingleCollisionResolution &rArr; rfalISO14443ATransceiveAnticollisionFrame &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerRid
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[94]"></a>rfalNfcaPollerInitialize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rfal_nfca.o(.text.rfalNfcaPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = rfalNfcaPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[110]"></a>rfalNfcaPollerSingleCollisionResolution</STRONG> (Thumb, 644 bytes, Stack size 80 bytes, rfal_nfca.o(.text.rfalNfcaPollerSingleCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = rfalNfcaPollerSingleCollisionResolution &rArr; rfalISO14443ATransceiveAnticollisionFrame &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[96]"></a>rfalNfcaPollerTechnologyDetection</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, rfal_nfca.o(.text.rfalNfcaPollerTechnologyDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalNfcaPollerTechnologyDetection &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[98]"></a>rfalNfcbPollerCollisionResolution</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, rfal_nfcb.o(.text.rfalNfcbPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = rfalNfcbPollerCollisionResolution &rArr; rfalNfcbPollerCollisionResolutionSlotted &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolutionSlotted
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[113]"></a>rfalNfcbPollerCollisionResolutionSlotted</STRONG> (Thumb, 1186 bytes, Stack size 96 bytes, rfal_nfcb.o(.text.rfalNfcbPollerCollisionResolutionSlotted))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = rfalNfcbPollerCollisionResolutionSlotted &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolution
</UL>

<P><STRONG><a name="[97]"></a>rfalNfcbPollerInitialize</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rfal_nfcb.o(.text.rfalNfcbPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = rfalNfcbPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerInitialize
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[10b]"></a>rfalNfcbTR2ToFDT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfal_nfcb.o(.text.rfalNfcbTR2ToFDT))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
</UL>

<P><STRONG><a name="[a1]"></a>rfalNfcfPollerCheckPresence</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, rfal_nfcf.o(.text.rfalNfcfPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = rfalNfcfPollerCheckPresence &rArr; rfalFeliCaPoll &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[ad]"></a>rfalNfcfPollerCollisionResolution</STRONG> (Thumb, 832 bytes, Stack size 72 bytes, rfal_nfcf.o(.text.rfalNfcfPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = rfalNfcfPollerCollisionResolution &rArr; rfalFeliCaPoll &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[a0]"></a>rfalNfcfPollerInitialize</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rfal_nfcf.o(.text.rfalNfcfPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = rfalNfcfPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[a3]"></a>rfalNfcvPollerCollisionResolution</STRONG> (Thumb, 448 bytes, Stack size 208 bytes, rfal_nfcv.o(.text.rfalNfcvPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = rfalNfcvPollerCollisionResolution &rArr; rfalISO15693TransceiveAnticollisionEOF &rArr; rfalISO15693TransceiveAnticollisionFrame &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionEOF
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[a2]"></a>rfalNfcvPollerInitialize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rfal_nfcv.o(.text.rfalNfcvPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = rfalNfcvPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[105]"></a>rfalSetAnalogConfig</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, rfal_analogconfig.o(.text.rfalSetAnalogConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeTestRegBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[10a]"></a>rfalSetBitRate</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, rfal_rfst25r3911.o(.text.rfalSetBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693PhyConfigure
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StreamConfigure
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetBitrate
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepInitiatorHandleActivation
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
</UL>

<P><STRONG><a name="[a6]"></a>rfalSetErrorHandling</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(.text.rfalSetErrorHandling))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
</UL>

<P><STRONG><a name="[a7]"></a>rfalSetFDTListen</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(.text.rfalSetFDTListen))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
</UL>

<P><STRONG><a name="[a8]"></a>rfalSetFDTPoll</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(.text.rfalSetFDTPoll))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
</UL>

<P><STRONG><a name="[a9]"></a>rfalSetGT</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(.text.rfalSetGT))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
</UL>

<P><STRONG><a name="[a5]"></a>rfalSetMode</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, rfal_rfst25r3911.o(.text.rfalSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetAnalogConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcvPollerInitialize
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcfPollerInitialize
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerInitialize
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerInitialize
</UL>

<P><STRONG><a name="[9e]"></a>rfalSt25tbPollerCheckPresence</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, rfal_st25tb.o(.text.rfalSt25tbPollerCheckPresence))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = rfalSt25tbPollerCheckPresence &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[9f]"></a>rfalSt25tbPollerCollisionResolution</STRONG> (Thumb, 916 bytes, Stack size 80 bytes, rfal_st25tb.o(.text.rfalSt25tbPollerCollisionResolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = rfalSt25tbPollerCollisionResolution &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[9d]"></a>rfalSt25tbPollerInitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rfal_st25tb.o(.text.rfalSt25tbPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = rfalSt25tbPollerInitialize &rArr; rfalNfcbPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[ec]"></a>rfalStartTransceive</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, rfal_rfst25r3911.o(.text.rfalStartTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = rfalStartTransceive &rArr; rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>

<P><STRONG><a name="[111]"></a>rfalT1TPollerInitialize</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rfal_t1t.o(.text.rfalT1TPollerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = rfalT1TPollerInitialize &rArr; rfalSetMode &rArr; rfalSetBitRate &rArr; rfalSetAnalogConfig &rArr; rfalChipChangeTestRegBits &rArr; st25r3911ChangeTestRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetGT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTPoll
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetFDTListen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetErrorHandling
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[112]"></a>rfalT1TPollerRid</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, rfal_t1t.o(.text.rfalT1TPollerRid))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rfalT1TPollerRid &rArr; rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
</UL>

<P><STRONG><a name="[cf]"></a>rfalTransceiveBlockingTx</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, rfal_rfst25r3911.o(.text.rfalTransceiveBlockingTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepReSendControlMsg
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
</UL>

<P><STRONG><a name="[108]"></a>rfalTransceiveBlockingTxRx</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, rfal_rfst25r3911.o(.text.rfalTransceiveBlockingTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = rfalTransceiveBlockingTxRx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerFullCollisionResolution
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCollisionResolution
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSt25tbPollerCheckPresence
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerTechnologyDetection
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcaPollerSingleCollisionResolution
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcbPollerCollisionResolutionSlotted
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalT1TPollerRid
</UL>

<P><STRONG><a name="[a4]"></a>rfalWakeUpModeHasWoke</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfal_rfst25r3911.o(.text.rfalWakeUpModeHasWoke))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[93]"></a>rfalWakeUpModeStart</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, rfal_rfst25r3911.o(.text.rfalWakeUpModeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = rfalWakeUpModeStart &rArr; st25r3911MeasureAntennaResonance &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAntennaResonance
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureRF
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[92]"></a>rfalWakeUpModeStop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(.text.rfalWakeUpModeStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = rfalWakeUpModeStop &rArr; st25r3911OscOn &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[b3]"></a>rfalWorker</STRONG> (Thumb, 2244 bytes, Stack size 56 bytes, rfal_rfst25r3911.o(.text.rfalWorker))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VICCDecode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso15693VCDCode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteFifo
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteTestRegister
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNumTxBits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsMissingPar
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTxRx
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO15693TransceiveAnticollisionFrame
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepPSL
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepATR
</UL>

<P><STRONG><a name="[11e]"></a>ssd1306_clear_screen</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, ssd1306.o(.text.ssd1306_clear_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ssd1306_clear_screen &rArr; ssd1306_refresh_gram &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_refresh_gram
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display_string
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_init
</UL>

<P><STRONG><a name="[11f]"></a>ssd1306_display_char</STRONG> (Thumb, 1168 bytes, Stack size 48 bytes, ssd1306.o(.text.ssd1306_display_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ssd1306_display_char
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display_string
</UL>

<P><STRONG><a name="[d5]"></a>ssd1306_display_string</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, ssd1306.o(.text.ssd1306_display_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ssd1306_display_string &rArr; ssd1306_clear_screen &rArr; ssd1306_refresh_gram &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_display_char
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>ssd1306_draw_bitmap</STRONG> (Thumb, 424 bytes, Stack size 52 bytes, ssd1306.o(.text.ssd1306_draw_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ssd1306_draw_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>ssd1306_draw_line</STRONG> (Thumb, 582 bytes, Stack size 28 bytes, ssd1306.o(.text.ssd1306_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ssd1306_draw_line
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>ssd1306_init</STRONG> (Thumb, 1932 bytes, Stack size 32 bytes, ssd1306.o(.text.ssd1306_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ssd1306_init &rArr; ssd1306_clear_screen &rArr; ssd1306_refresh_gram &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>ssd1306_refresh_gram</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, ssd1306.o(.text.ssd1306_refresh_gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ssd1306_refresh_gram &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_clear_screen
</UL>

<P><STRONG><a name="[df]"></a>st25r3911AdjustRegulators</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, st25r3911.o(.text.st25r3911AdjustRegulators))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = st25r3911AdjustRegulators &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>

<P><STRONG><a name="[e0]"></a>st25r3911CalibrateAntenna</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, st25r3911.o(.text.st25r3911CalibrateAntenna))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = st25r3911CalibrateAntenna &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
</UL>

<P><STRONG><a name="[e2]"></a>st25r3911ChangeRegisterBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st25r3911_com.o(.text.st25r3911ChangeRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = st25r3911ChangeRegisterBits &rArr; st25r3911ModifyRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeRegBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StreamConfigure
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[e4]"></a>st25r3911ChangeTestRegisterBits</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, st25r3911_com.o(.text.st25r3911ChangeTestRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = st25r3911ChangeTestRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalChipChangeTestRegBits
</UL>

<P><STRONG><a name="[104]"></a>st25r3911CheckChipID</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, st25r3911.o(.text.st25r3911CheckChipID))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = st25r3911CheckChipID &rArr; st25r3911ReadRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[de]"></a>st25r3911CheckReg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, st25r3911.o(.text.st25r3911CheckReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = st25r3911CheckReg &rArr; st25r3911ReadRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalCalibrate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>

<P><STRONG><a name="[122]"></a>st25r3911ClearInterrupts</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, st25r3911_interrupt.o(.text.st25r3911ClearInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = st25r3911ClearInterrupts &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
</UL>

<P><STRONG><a name="[ee]"></a>st25r3911ClrRegisterBits</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, st25r3911_com.o(.text.st25r3911ClrRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = st25r3911ClrRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOff
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[f8]"></a>st25r3911DisableInterrupts</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, st25r3911_interrupt.o(.text.st25r3911DisableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAntennaResonance
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureRF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[f6]"></a>st25r3911EnableInterrupts</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, st25r3911_interrupt.o(.text.st25r3911EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = st25r3911EnableInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAntennaResonance
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureRF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[ed]"></a>st25r3911ExecuteCommand</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, st25r3911_com.o(.text.st25r3911ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = st25r3911ExecuteCommand &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAntennaResonance
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureRF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFeliCaPoll
</UL>

<P><STRONG><a name="[e7]"></a>st25r3911ExecuteCommands</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, st25r3911_com.o(.text.st25r3911ExecuteCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = st25r3911ExecuteCommands &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[f5]"></a>st25r3911GetInterrupt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, st25r3911_interrupt.o(.text.st25r3911GetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st25r3911GetInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAntennaResonance
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureRF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[102]"></a>st25r3911InitInterrupts</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, st25r3911_interrupt.o(.text.st25r3911InitInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[103]"></a>st25r3911Initialize</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, st25r3911.o(.text.st25r3911Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = st25r3911Initialize &rArr; st25r3911ClearInterrupts &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClearInterrupts
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
</UL>

<P><STRONG><a name="[60]"></a>st25r3911Isr</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, st25r3911_interrupt.o(.text.st25r3911Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = st25r3911Isr &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>st25r3911MeasureAntennaResonance</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, st25r3911.o(.text.st25r3911MeasureAntennaResonance))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = st25r3911MeasureAntennaResonance &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[119]"></a>st25r3911MeasureRF</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, st25r3911.o(.text.st25r3911MeasureRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = st25r3911MeasureRF &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
</UL>

<P><STRONG><a name="[120]"></a>st25r3911ModifyRegister</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, st25r3911_com.o(.text.st25r3911ModifyRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = st25r3911ModifyRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
</UL>

<P><STRONG><a name="[11b]"></a>st25r3911OscOn</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, st25r3911.o(.text.st25r3911OscOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = st25r3911OscOn &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
</UL>

<P><STRONG><a name="[f1]"></a>st25r3911PerformCollisionAvoidance</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, st25r3911.o(.text.st25r3911PerformCollisionAvoidance))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = st25r3911PerformCollisionAvoidance &rArr; st25r3911DisableInterrupts &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>

<P><STRONG><a name="[e8]"></a>st25r3911ReadFifo</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, st25r3911_com.o(.text.st25r3911ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = st25r3911ReadFifo &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[e6]"></a>st25r3911ReadMultipleRegisters</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, st25r3911_com.o(.text.st25r3911ReadMultipleRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Isr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClearInterrupts
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsMissingPar
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFIFOStatusIsIncompleteByte
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalErrorHandling
</UL>

<P><STRONG><a name="[f7]"></a>st25r3911ReadRegister</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, st25r3911_com.o(.text.st25r3911ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = st25r3911ReadRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckChipID
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CheckReg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetBitrate
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAntennaResonance
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureRF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[116]"></a>st25r3911SetBitrate</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, st25r3911.o(.text.st25r3911SetBitrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = st25r3911SetBitrate &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[fa]"></a>st25r3911SetNoResponseTime_64fcs</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, st25r3911.o(.text.st25r3911SetNoResponseTime_64fcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = st25r3911SetNoResponseTime_64fcs &rArr; st25r3911ModifyRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>

<P><STRONG><a name="[11c]"></a>st25r3911SetNumTxBits</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, st25r3911.o(.text.st25r3911SetNumTxBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = st25r3911SetNumTxBits &rArr; st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[ef]"></a>st25r3911SetRegisterBits</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, st25r3911_com.o(.text.st25r3911SetRegisterBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = st25r3911SetRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveAnticollisionFrame
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911TxRxOn
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[fc]"></a>st25r3911StartGPTimer_8fcs</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, st25r3911.o(.text.st25r3911StartGPTimer_8fcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ModifyRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalPrepareTransceive
</UL>

<P><STRONG><a name="[118]"></a>st25r3911StreamConfigure</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, st25r3911.o(.text.st25r3911StreamConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = st25r3911StreamConfigure &rArr; st25r3911ChangeRegisterBits &rArr; st25r3911ModifyRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetBitRate
</UL>

<P><STRONG><a name="[f0]"></a>st25r3911TxRxOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st25r3911.o(.text.st25r3911TxRxOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = st25r3911TxRxOff &rArr; st25r3911ClrRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOff
</UL>

<P><STRONG><a name="[f2]"></a>st25r3911TxRxOn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st25r3911.o(.text.st25r3911TxRxOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = st25r3911TxRxOn &rArr; st25r3911SetRegisterBits &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
</UL>

<P><STRONG><a name="[ff]"></a>st25r3911WaitForInterruptsTimed</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, st25r3911_interrupt.o(.text.st25r3911WaitForInterruptsTimed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = st25r3911WaitForInterruptsTimed &rArr; timerIsExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerCalculateTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911PerformCollisionAvoidance
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911CalibrateAntenna
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureAntennaResonance
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911MeasureRF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911AdjustRegulators
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911OscOn
</UL>

<P><STRONG><a name="[11d]"></a>st25r3911WriteFifo</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, st25r3911_com.o(.text.st25r3911WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = st25r3911WriteFifo &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[fb]"></a>st25r3911WriteRegister</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, st25r3911_com.o(.text.st25r3911WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = st25r3911WriteRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalSetMode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWakeUpModeStart
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StreamConfigure
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNumTxBits
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetNoResponseTime_64fcs
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetBitrate
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911Initialize
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911DisableInterrupts
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>

<P><STRONG><a name="[fe]"></a>st25r3911WriteTestRegister</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, st25r3911_com.o(.text.st25r3911WriteTestRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = st25r3911WriteTestRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiTxRx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalInitialize
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalListenSetState
</UL>

<P><STRONG><a name="[c6]"></a>stdout_putchar</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usart.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stdout_putchar &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[f3]"></a>timerCalculateTimer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(.text.timerCalculateTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timerCalculateTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalFieldOnAndStartGT
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
</UL>

<P><STRONG><a name="[cb]"></a>timerIsExpired</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timer.o(.text.timerIsExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timerIsExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911WaitForInterruptsTimed
</UL>

<P><STRONG><a name="[124]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[137]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[5e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Browser_save_fileame
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
</UL>

<P><STRONG><a name="[138]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[139]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[13a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[56]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
</UL>

<P><STRONG><a name="[55]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
</UL>

<P><STRONG><a name="[b7]"></a>putchar</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, putchar.o(i.putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = putchar &rArr; fputc &rArr; stdout_putchar &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
</UL>

<P><STRONG><a name="[5a]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = puts &rArr; fputc &rArr; stdout_putchar &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Browser_save_fileame
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendAPDUs
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendNdefUri
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9c]"></a>demoIsoDepBlockingTxRx</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, demo.o(.text.demoIsoDepBlockingTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = demoIsoDepBlockingTxRx &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; rfalIsoDepGetTransceiveStatus &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetApduTransceiveStatus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepStartApduTransceive
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Str
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoSendAPDUs
</UL>

<P><STRONG><a name="[ae]"></a>demoSendNdefUri</STRONG> (Thumb, 500 bytes, Stack size 80 bytes, demo.o(.text.demoSendNdefUri))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = demoSendNdefUri &rArr; rfalNfcDepGetTransceiveStatus &rArr; nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepStartTransceive
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[b0]"></a>demoSendAPDUs</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, demo.o(.text.demoSendAPDUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = demoSendAPDUs &rArr; demoIsoDepBlockingTxRx &rArr; rfalIsoDepGetApduTransceiveStatus &rArr; rfalIsoDepGetTransceiveStatus &rArr; isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoIsoDepBlockingTxRx
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoCycle
</UL>

<P><STRONG><a name="[53]"></a>SD_SendCmd</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, sd_card_drive.o(.text.SD_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SD_SendCmd &rArr; SD_IO_WriteReadData &rArr; MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteReadData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_WriteByte
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_IO_CSState
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[ba]"></a>move_window</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ff.o(.text.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[bf]"></a>find_volume</STRONG> (Thumb, 1348 bytes, Stack size 32 bytes, ff.o(.text.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = find_volume &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[c0]"></a>follow_path</STRONG> (Thumb, 1548 bytes, Stack size 48 bytes, ff.o(.text.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[b9]"></a>dir_sdi</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, ff.o(.text.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[b8]"></a>dir_find</STRONG> (Thumb, 1304 bytes, Stack size 40 bytes, ff.o(.text.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dir_find &rArr; dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[c1]"></a>inc_lock</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ff.o(.text.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[bd]"></a>dir_read</STRONG> (Thumb, 770 bytes, Stack size 40 bytes, ff.o(.text.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dir_read &rArr; get_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[c3]"></a>get_fileinfo</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, ff.o(.text.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[be]"></a>sum_sfn</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, ff.o(.text.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[38]"></a>iso15693PhyVCDCode1Of4</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, rfal_iso15693_2.o(.text.iso15693PhyVCDCode1Of4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iso15693PhyVCDCode1Of4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfal_iso15693_2.o(.text.iso15693VCDCode)
</UL>
<P><STRONG><a name="[39]"></a>iso15693PhyVCDCode1Of256</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, rfal_iso15693_2.o(.text.iso15693PhyVCDCode1Of256))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iso15693PhyVCDCode1Of256
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfal_iso15693_2.o(.text.iso15693VCDCode)
</UL>
<P><STRONG><a name="[ca]"></a>isoDepDataExchangePCD</STRONG> (Thumb, 862 bytes, Stack size 40 bytes, rfal_isodep.o(.text.isoDepDataExchangePCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = isoDepDataExchangePCD &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepInitialize
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalGetTransceiveStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepTx
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsExpired
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepDeselect
</UL>

<P><STRONG><a name="[ce]"></a>isoDepHandleControlMsg</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, rfal_isodep.o(.text.isoDepHandleControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepReSendControlMsg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>

<P><STRONG><a name="[cc]"></a>isoDepTx</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, rfal_isodep.o(.text.isoDepTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = isoDepTx &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepDataExchangePCD
</UL>

<P><STRONG><a name="[d0]"></a>isoDepReSendControlMsg</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, rfal_isodep.o(.text.isoDepReSendControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = isoDepReSendControlMsg &rArr; isoDepHandleControlMsg &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isoDepHandleControlMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepGetTransceiveStatus
</UL>

<P><STRONG><a name="[109]"></a>rfalIsoDepCalcBitRate</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, rfal_isodep.o(.text.rfalIsoDepCalcBitRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rfalIsoDepCalcBitRate
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollAHandleActivation
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalIsoDepPollBHandleActivation
</UL>

<P><STRONG><a name="[dc]"></a>nfcipTx</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, rfal_nfcdep.o(.text.nfcipTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalTransceiveBlockingTx
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipDEPControlMsg
</UL>

<P><STRONG><a name="[db]"></a>nfcipDEPControlMsg</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, rfal_nfcdep.o(.text.nfcipDEPControlMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = nfcipDEPControlMsg &rArr; nfcipTx &rArr; rfalTransceiveBlockingTx &rArr; rfalWorker &rArr; rfalListenSetState &rArr;  rfalListenSetState (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcipTx
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalNfcDepGetTransceiveStatus
</UL>

<P><STRONG><a name="[fd]"></a>rfalPrepareTransceive</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, rfal_rfst25r3911.o(.text.rfalPrepareTransceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = rfalPrepareTransceive &rArr; st25r3911StartGPTimer_8fcs &rArr; st25r3911ModifyRegister &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ChangeRegisterBits
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911StartGPTimer_8fcs
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911GetInterrupt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommand
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911EnableInterrupts
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ClrRegisterBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911SetRegisterBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalISO14443ATransceiveShortFrame
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalStartTransceive
</UL>

<P><STRONG><a name="[e5]"></a>rfalErrorHandling</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, rfal_rfst25r3911.o(.text.rfalErrorHandling))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = rfalErrorHandling &rArr; st25r3911ReadFifo &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ExecuteCommands
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadFifo
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[e9]"></a>rfalFIFOStatusIsIncompleteByte</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(.text.rfalFIFOStatusIsIncompleteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rfalFIFOStatusIsIncompleteByte &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[ea]"></a>rfalFIFOStatusIsMissingPar</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rfal_rfst25r3911.o(.text.rfalFIFOStatusIsMissingPar))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rfalFIFOStatusIsMissingPar &rArr; st25r3911ReadMultipleRegisters &rArr; SpiTxRx &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25r3911ReadMultipleRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfalWorker
</UL>

<P><STRONG><a name="[125]"></a>_printf_core</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
